// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextserviceClient is the client API for Textservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextserviceClient interface {
	Textfunc(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error)
}

type textserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextserviceClient(cc grpc.ClientConnInterface) TextserviceClient {
	return &textserviceClient{cc}
}

func (c *textserviceClient) Textfunc(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, "/Textservice/textfunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextserviceServer is the server API for Textservice service.
// All implementations must embed UnimplementedTextserviceServer
// for forward compatibility
type TextserviceServer interface {
	Textfunc(context.Context, *TextRequest) (*TextResponse, error)
	mustEmbedUnimplementedTextserviceServer()
}

// UnimplementedTextserviceServer must be embedded to have forward compatible implementations.
type UnimplementedTextserviceServer struct {
}

func (UnimplementedTextserviceServer) Textfunc(context.Context, *TextRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Textfunc not implemented")
}
func (UnimplementedTextserviceServer) mustEmbedUnimplementedTextserviceServer() {}

// UnsafeTextserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextserviceServer will
// result in compilation errors.
type UnsafeTextserviceServer interface {
	mustEmbedUnimplementedTextserviceServer()
}

func RegisterTextserviceServer(s grpc.ServiceRegistrar, srv TextserviceServer) {
	s.RegisterService(&Textservice_ServiceDesc, srv)
}

func _Textservice_Textfunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextserviceServer).Textfunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Textservice/textfunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextserviceServer).Textfunc(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Textservice_ServiceDesc is the grpc.ServiceDesc for Textservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Textservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Textservice",
	HandlerType: (*TextserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "textfunc",
			Handler:    _Textservice_Textfunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// BytesserviceClient is the client API for Bytesservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BytesserviceClient interface {
	Bytesfunc(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*BytesResponse, error)
}

type bytesserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewBytesserviceClient(cc grpc.ClientConnInterface) BytesserviceClient {
	return &bytesserviceClient{cc}
}

func (c *bytesserviceClient) Bytesfunc(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*BytesResponse, error) {
	out := new(BytesResponse)
	err := c.cc.Invoke(ctx, "/Bytesservice/bytesfunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BytesserviceServer is the server API for Bytesservice service.
// All implementations must embed UnimplementedBytesserviceServer
// for forward compatibility
type BytesserviceServer interface {
	Bytesfunc(context.Context, *BytesRequest) (*BytesResponse, error)
	mustEmbedUnimplementedBytesserviceServer()
}

// UnimplementedBytesserviceServer must be embedded to have forward compatible implementations.
type UnimplementedBytesserviceServer struct {
}

func (UnimplementedBytesserviceServer) Bytesfunc(context.Context, *BytesRequest) (*BytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bytesfunc not implemented")
}
func (UnimplementedBytesserviceServer) mustEmbedUnimplementedBytesserviceServer() {}

// UnsafeBytesserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BytesserviceServer will
// result in compilation errors.
type UnsafeBytesserviceServer interface {
	mustEmbedUnimplementedBytesserviceServer()
}

func RegisterBytesserviceServer(s grpc.ServiceRegistrar, srv BytesserviceServer) {
	s.RegisterService(&Bytesservice_ServiceDesc, srv)
}

func _Bytesservice_Bytesfunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BytesserviceServer).Bytesfunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bytesservice/bytesfunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BytesserviceServer).Bytesfunc(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bytesservice_ServiceDesc is the grpc.ServiceDesc for Bytesservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bytesservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bytesservice",
	HandlerType: (*BytesserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bytesfunc",
			Handler:    _Bytesservice_Bytesfunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
